<?php

/**
 * Copyright since 2024 Firstruner and Contributors
 * Firstruner is an Registered Trademark & Property of Christophe BOULAS
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Freemium License
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to contact@firstruner.fr so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit, reproduce ou modify this file.
 * Please refer to https://firstruner.fr/ or contact Firstruner for more information.
 *
 * @author    Firstruner and Contributors <contact@firstruner.fr>
 * @copyright Since 2024 Firstruner and Contributors
 * @license   Proprietary
 * @version 2.0.0
 */

namespace System;

use \Exception;
use System\Attributes\Partial;

#[Partial()]
final class Guid implements IGuid_Static
{
      // static
      public static function Empty()
      {
            return new Guid();
      }

      private static function generateV7() : string
      {
            $timestamp = (int) (microtime(true) * 1000);
        
            $time_high = ($timestamp >> 28) & 0xFFFFFFFF;
            $time_low = $timestamp & 0x0FFFFFFF;
        
            $rand_high = mt_rand(0, 0x0FFF);
            $rand_low = mt_rand(0, 0x3FFFFFFFFFFFF);
        
            return sprintf(
                '%08X%04X7%03X%04X%012X',
                $time_high,          // Timestamp partie haute
                $time_low >> 16,     // Timestamp partie basse (bits 17-32)
                $time_low & 0xFFFF,  // Timestamp partie basse (bits 1-16)
                ($rand_high | 0x8000), // Aléatoire avec les 2 bits de "variant" (10xx)
                $rand_low            // Aléatoire restant
            );
      }

      private static function generateV4() : string
      {
            if (function_exists('com_create_guid')) {
                  return trim(com_create_guid(), '{}');
            } else {
                  return
                        sprintf(
                              '%04X%04X%04X%04X%04X%04X%04X%04X',
                              mt_rand(0, 65535),
                              mt_rand(0, 65535),
                              mt_rand(0, 65535),
                              mt_rand(16384, 20479),
                              mt_rand(32768, 49151),
                              mt_rand(0, 65535),
                              mt_rand(0, 65535),
                              mt_rand(0, 65535)
                        );
            }
      }

      public static function NewGuid(int $guidVersion = Guid_Type::Default) : Guid
      {
            switch ($guidVersion)
            {
                  default:
                  case Guid_Type::V4:
                        return new Guid(Guid::generateV4());
                  case Guid_Type::V7:
                        return new Guid(Guid::generateV7());
            }
      }

      public static function CreateVersion7() : Guid
      {
            return new Guid(Guid::generateV7());
      }

      public static function Parse($value)
      {
            return new Guid($value);
      }

      public static function TryParse($value)
      {
            try {
                  return new Guid($value);
            } catch (Exception $ex) {
                  return new Guid();
            } catch (\Error $er) {
                  return new Guid();
            }
      }

      public static function NewFromLenght(int $length)
      {
            return bin2hex(openssl_random_pseudo_bytes($length));
      }
}
